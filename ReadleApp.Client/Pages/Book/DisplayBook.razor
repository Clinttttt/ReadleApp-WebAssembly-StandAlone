@page "/DisplayBook/{WorkKey}"
@using ReadleApp.Client.Services
@using ReadleApp.Domain.Model
@using ReadleApp.Infrastructure.Services.IndexDb
@using static ReadleApp.Domain.Model.OpenLibraryModel
@inject HttpClient http
@inject BookClientServices bookClient
@inject BookRespository bookstorage


@if (books == null)
{
    <h1>Empty Book</h1>
}
else
{
    <h1>@books.Title</h1>
    <img class=" top-0 left-0 w-full h-full object-cover"
    src="@books.CoverUrl"
    alt="Book cover image" />
    <img />


}


@code {
    [Parameter]
    public string? WorkKey { get; set; }
    string? Title;
    public OpenLibraryModel? books;
    string? bookCover;
    public bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        string key = WorkKey!.StartsWith("/works/") ? WorkKey : "/works/" + WorkKey;
        books = await http.GetFromJsonAsync<OpenLibraryModel>($"https://openlibrary.org{key}.json");

        if (books!.Authors != null)
        {
            foreach (var workAuthor in books.Authors)
            {
                if (!string.IsNullOrEmpty(workAuthor.Author?.Key))
                {
                    var author = await http.GetFromJsonAsync<AuthRef>($"https://openlibrary.org{workAuthor.Author.Key}.json");
                    workAuthor.Author.Name = author!.Name;
                }
            }

        }
        StateHasChanged();
    }

    private string GetAuthorsString()
    {
        return books?.Authors != null
            ? string.Join(", ", books.Authors.Where(a => !string.IsNullOrEmpty(a.Author?.Name)).Select(a => a.Author!.Name))
            : string.Empty;
    }
}


