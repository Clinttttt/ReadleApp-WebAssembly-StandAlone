@page "/DisplayBook/{WorkKey}"
@using ReadleApp.Client.Services
@using ReadleApp.Domain
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@using ReadleApp.Infrastructure.Services
@using ReadleApp.Infrastructure.Services.IndexDb
@using static ReadleApp.Domain.Model.OpenLibraryModel
@inject HttpClient http
@inject BookClientServices bookClient
@inject IBookRespository bookstorage
@inject BookStateService bookState
@inject BookApiServices bookApi
@inject IGetDetailsServices ViewDetails





@if (books is not null)
{
    <h1> title: @books.Title</h1>
    <h1> author:@books.Authorname</h1>
    <h1> subtitle: @books.SubTitle</h1>
    <h1> publishdate: @books.Publishdate</h1>
    <p> description: @books.DescriptionHelper</p>
    <h1> subjects: @books.Substring</h1>
    <h1> publishers: @books.Publishers</h1>
    <h1> want to read: @books.Bookshelves?.WantToRead</h1>
    <h1> current reading: @books.Bookshelves?.CurrentReading</h1>
    <h1> already read: @books.Bookshelves?.AlreadyRead</h1>


}
else
{

    <h1>No Book</h1>
}



@code {

    [Parameter]
    public string? WorkKey { get; set; }

    public OpenLibraryViewDetails? books;
    string? bookCover;
    public bool loaded = false;
    public string? Isbn { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await bookApi.ViewBookAsync(WorkKey!);
            Console.WriteLine($"title:{ books?.Title}");
            Console.WriteLine($"subtitle:{books?.SubTitle}");
            Console.WriteLine($"publishdate:{books?.Publishdate}");
            Console.WriteLine($"description:{books?.DescriptionHelper}");
            Console.WriteLine($"subjects:{books?.Subjects}");
            Console.WriteLine($"publishers:{books?.Publishers}");
            Console.WriteLine($"want to read:{books?.Bookshelves?.WantToRead}");
            Console.WriteLine($"current reading:{books?.Bookshelves?.CurrentReading}");
            Console.WriteLine($"already read:{books?.Bookshelves?.AlreadyRead}");
            Console.WriteLine($"workkey:{books?.Workkey}");

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Book fetch failed: {ex.Message}");         
        }
        StateHasChanged();



    }



}














    @*@code{
    [Parameter]
    public string? WorkKey { get; set; }
    @inject HttpClient Http
    public string? PlainText { get; set; }
    public OpenLibraryModel? Books { get; set; }
    protected override async Task OnInitializedAsync()
    {



        string url =  "https://ia600408.us.archive.org/11/items/alicesadventures00carr_16/alicesadventures00carr_16_djvu.txt";
        PlainText = await Http.GetStringAsync(url);
        Console.WriteLine($"Text:{PlainText}");

    }
}*@


@*@page "/DisplayBook/{WorkKey}"
@using ReadleApp.Client.Services
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@inject BookClientServices bookClient
@inject IBookRespository bookstorage
@try
{
    @if (Books != null)
    {

    }
    else
    {

        <h1>Empty</h1>
    }
}catch(Exception ex)
{
    Console.WriteLine($"Error{ex.Message}");
}


@code{
    [Parameter]
    public string? WorkKey { get; set; }
    @inject HttpClient Http
    public string? PlainText { get; set; }
    public OpenLibraryModel? Books { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Books = await bookstorage.GetBookById(WorkKey!);



    }
}*@