@page "/DisplayBook/{WorkKey}"
@using ReadleApp.Client.Services
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@using ReadleApp.Infrastructure.Services
@using ReadleApp.Infrastructure.Services.IndexDb
@using static ReadleApp.Domain.Model.OpenLibraryModel
@inject HttpClient http
@inject BookClientServices bookClient
@inject IBookRespository bookstorage
@inject BookStateService bookState
@inject BookApiServices bookApi








@*@if (books == null)
{
    <h1>Empty Book</h1>
}
else
{
    <h1>@books.Title</h1>
    <img class=" top-0 left-0 w-full h-full object-cover"
    src="@books.CoverUrl"
    alt="Book cover image" />
    <img />
    <h1>@books.AuthorName</h1>
    <h1>@books.DescriptionRaw</h1>
    <h1>@books.Ebooks</h1>
    <h1>@books.languages</h1>
    <h1>@books.Subjects</h1>
    <h1>@books.SubjectsString</h1>
}
*@





@if (books != null)
{

    <h1>@books.Title</h1>
    <img src="@books.CoverUrl" />
    <p>@books.SubjectsString</p>
    <pre>@books.FullText</pre>
    
}
else
{

    <h1>No Book</h1>
}



@code {

    [Parameter]
    public string? WorkKey { get; set; }

    public OpenLibraryDoc? books;
    string? bookCover;
    public bool loaded = false;
    public string? Isbn { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {

            books = await bookstorage.GetBookById(WorkKey!);
            /* Console.WriteLine($"Authors1:{books?.AuthorName}");
            Console.WriteLine($"Authors1:{books?.Title}");*/
          

                 if (books == null)
            {
                books = await bookClient.GetBookById(WorkKey!);
                Console.WriteLine($"Authors2:{books?.AuthorName}");
                Console.WriteLine($"Title2:{books?.Title}");
                books = await bookClient.GetBookById(WorkKey!);

                }


        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Book fetch failed: {ex.Message}");
            books = null;
        }
        StateHasChanged();



    }



}














    @*@code{
    [Parameter]
    public string? WorkKey { get; set; }
    @inject HttpClient Http
    public string? PlainText { get; set; }
    public OpenLibraryModel? Books { get; set; }
    protected override async Task OnInitializedAsync()
    {



        string url =  "https://ia600408.us.archive.org/11/items/alicesadventures00carr_16/alicesadventures00carr_16_djvu.txt";
        PlainText = await Http.GetStringAsync(url);
        Console.WriteLine($"Text:{PlainText}");

    }
}*@


@*@page "/DisplayBook/{WorkKey}"
@using ReadleApp.Client.Services
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@inject BookClientServices bookClient
@inject IBookRespository bookstorage
@try
{
    @if (Books != null)
    {

    }
    else
    {

        <h1>Empty</h1>
    }
}catch(Exception ex)
{
    Console.WriteLine($"Error{ex.Message}");
}


@code{
    [Parameter]
    public string? WorkKey { get; set; }
    @inject HttpClient Http
    public string? PlainText { get; set; }
    public OpenLibraryModel? Books { get; set; }

    protected override async Task OnInitializedAsync()
    {

        Books = await bookstorage.GetBookById(WorkKey!);



    }
}*@