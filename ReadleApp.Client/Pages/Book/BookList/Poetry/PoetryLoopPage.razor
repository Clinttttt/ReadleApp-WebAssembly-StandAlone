@using ReadleApp.Client.Services
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@using ReadleApp.Infrastructure.Services
@inject BookApiServices bookApiServices
@inject IBookRespository _db
@inject BookClientServices bookClient
@inject BookStateService bookState
<div class="flex  overflow-x-scroll scrollbar-hide w-full">
    <div class="gap-2 flex-nowrap flex ">
        @if (!bookState.AllBook.ContainsKey("Poetry") || bookState.AllBook["Poetry"].Count == 0)
        {

            @for (int i = 0; i < 10; i++)
            {
                <div class="relative flex-shrink-0 rounded-t-lg w-20 h-32">
                    <img class="absolute top-0 left-0 w-full h-full object-cover"
                    src="img/loading.gif"
                    alt="loading..." />
                </div>
            }
        }
        else
        {
            @if (bookState.AllBook.TryGetValue(category, out var books) && books.Count > 0)
            {

                foreach (var book in books)
                {
                    <NavLink href="@($"/DisplayBook/{(book.WorkString!)}")">
                        <div class="relative flex-shrink-0  rounded-t-lg  w-20 h-32">

                            <img class="absolute top-0 left-0 w-full h-full object-cover"
                                 src="img/loading.gif"
                                 alt="loading..." />

                            <img class="absolute top-0 left-0 w-full h-full object-cover"
                                 src="@book._CoverBase64"
                                 alt="" />

                        </div>
                    </NavLink>
                }

                }
            }
        


    </div>
</div>

@code {
    private string category = "Poetry";
    protected override void OnInitialized()
    {
        bookState.OnChange += StateHasChanged;


    }
    public void Dispose()
    {
        bookState.OnChange -= StateHasChanged;
    }
}