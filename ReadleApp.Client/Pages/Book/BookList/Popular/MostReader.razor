@using ReadleApp.Client.Services
@using ReadleApp.Domain.Interface
@using ReadleApp.Domain.Model
@using ReadleApp.Infrastructure.Services
@inject BookApiServices bookApiServices
@inject IBookRespository _db
@inject BookClientServices bookClient
@inject BookStateService bookState
<div class="flex  overflow-x-scroll scrollbar-hide w-full">
    <div class="gap-2 flex-nowrap flex ">
        @if (!bookState.AllBook.ContainsKey("MostRead") || bookState.AllBook["MostRead"].Count == 0)
        {
            <h1>empty</h1>
        }
        else
        {

            @foreach (var book in bookState.AllBook["MostRead"])
            {
                if (string.IsNullOrEmpty(book._CoverBase64) && string.IsNullOrEmpty(book._Workkey))
                {
                    <h1>No Book Cover</h1>
                }
                else
                {

                    //System.Console.WriteLine($"Authorr: {book.AuthorName}");
                    @* <NavLink href="@($"/DisplayBook/{Uri.EscapeDataString(book.WorkKey!)}")">*@
                    <NavLink href="@($"/DisplayBook/{(book.WorkString)}")">
                        <div class="relative flex-shrink-0  rounded-t-lg  w-20 h-32">

                            <img class=" top-0 left-0 w-full h-full object-cover"
                             src="@($"data:image/jpeg;base64,{book._CoverBase64}")"
                                 alt="Book cover image" />
                            <h1>@book._Title</h1>
                          
                         
                        </div>
                    </NavLink>
                }
            }
        }


    </div>
</div>



@code {
    protected override void OnInitialized()
    {
        bookState.OnChange += StateHasChanged;


    }
    public void Dispose()
    {
        bookState.OnChange -= StateHasChanged;
    }
}